### Introduction ###

This document contains information about how each feature of django-simple-history is implemented at abstract level.
Features are taken from https://django-simple-history.readthedocs.io/.

### Features and how they are implemented

Track History (v3.3.0)

1. history attribute is defined in the model (for which we want to track history) with HistoricalRecords instance.
2. In HistoricalRecords class (simple_history.models.HistoricalRecords) contribute_to_class method is defined.
3. contribute_to_class method is invoked by django.db.models.base.ModelBase class (metaclass of django.db.models.Model).
4. contribute_to_class method received the model name (for which we want to track history) and name of the attribute being assigned with HistoricalRecords instance.
5. In contribute_to_class method finalize method is connected with class_prepared signal (django.db.models.signals.class_prepared) which is sent whenever a model class is being prepared.
6. Then extra methods specific to tracked model are added to given model.
7. finalize method is defined in the HistoricalRecords class.
8. In finalize method history model definition is created, and post save, post delete methods are connected to corresponding signals.

---

Track History for a Third-Party Model (v3.3.0)

1. Third party models can be tracked using register function (simple_history.register).
2. In this function, HistoricalRecords attribute is created.
3. Then, given model is assigned to cls property of HistoricalRecords attribute.
4. Then, given model is assigned extra methods specific to tracked model.
5. In the end finalize method of HistoricalRecords attribute is invoked with given model as argument.

---

Populate History Command (v3.3.0)
Used for generating initial change for pre-existing model instances.

1. Handler of the command is defined in simple_history\management\commands\populate_history.py.
2. First, it fetches the list of history models based on given argument.
3. Then, for each model it gets the instances (records).
4. Then, it saves this record (in batch) in the corresponding history table with create ("+") history type.

---

Querying history on a model instance and Querying history on a model class (v3.3.0)

1. In the finalize method, a HistoryDescriptor (simple_history.manager.HistoryDescriptor) is created with history model.
2. In HistoryDescriptor a HistoricalQuerySet(simple_history.manager.HistoricalQuerySet) is returned which is a child class of (django.db.models.QuerySet).
3. Then the descriptor is set as an value of history attribute (which is a manager_name in context of HistoricalRecords class).
4. So, whenever you access model.history, you get HistoricalQuerySet in return, in this way you indirectly interact with the history model.

---

Getting previous and next historical record (v3.3.0)

1. In the create_history_model method, that is invoke inside the finalize method, extra fields are added to the history model.
2. prev_record and next_record are the attributes set as an extra fields of history model.
3. Their values are fetched from their corresponding getters methods.

---

Reverting the model (v3.3.0)

1. model instance can be reverted to the older version by getting desired older version instance from the history model.
2. Then, access older model instance via history model instance (fetched in previous step) and save it.
3. instance attribute is added to the history model where extra fields are set and instance is fetched via getter method.